// Generated by CoffeeScript 1.12.7
(function() {
  var WebSocket, wsTransport;

  WebSocket = require('ws');

  wsTransport = (function() {
    function wsTransport(params) {
      this.params = params;
      if (!this.params) {
        throw new Error('emptyParams');
      }
      this.httpParams = this.params.http || {};
      this.wsParams = this.params.ws || {};
      this.http = this.params.ssl ? require('https') : require('http');
    }

    wsTransport.prototype.send = function(body, callback) {
      var ws;
      ws = new WebSocket(this.params.url);
      ws.on('open', function() {
        return ws.send(JSON.stringify(body));
      });
      ws.on('error', function(e) {
        if (callback) {
          return callback(e, null);
        }
      });
      return ws.on('message', function(data) {
        if (callback) {
          callback(null, data.toString());
        }
        return ws.close();
      });
    };

    wsTransport.prototype.close = function() {
      if (this.httpServer.close()) {
        return this.httpServer.close();
      }
    };

    wsTransport.prototype.httpHandler = function(req, res) {
      return res.end();
    };

    wsTransport.prototype.listen = function(server) {
      this.wsParams.noServer = true;
      this.wsServer = new WebSocket.Server(this.wsParams);
      this.wsServer.on('connection', function(ws, request) {
        var client_ip;
        client_ip = request.headers['x-forwarded-for'] || request.connection.remoteAddress || '127.0.0.1';
        client_ip = client_ip.replace('::ffff:', '');
        return ws.on('message', function(data) {
          return server.handleCall(data.toString(), {
            client_ip: client_ip
          }, function(answer) {
            if (answer) {
              return ws.send(JSON.stringify(answer));
            }
          });
        });
      });
      if (this.params.ssl) {
        this.httpServer = this.http.createServer(this.httpParams, this.httpHandler);
      } else {
        this.httpServer = this.http.createServer(this.httpHandler);
      }
      this.httpServer.on('upgrade', (function(_this) {
        return function(request, socket, head) {
          return _this.wsServer.handleUpgrade(request, socket, head, function(ws) {
            return _this.wsServer.emit('connection', ws, request);
          });
        };
      })(this));
      return this.httpServer.listen(this.params.port);
    };

    return wsTransport;

  })();

  module.exports = wsTransport;

}).call(this);
