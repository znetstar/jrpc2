// Generated by CoffeeScript 1.12.7
(function() {
  var httpTransport, rpc;

  rpc = require('./jrpc2');

  httpTransport = (function() {
    function httpTransport(params) {
      this.params = params;
      if (!this.params) {
        throw new Error('emptyParams');
      }
      this.http = this.params.ssl ? require('https') : require('http');
    }

    httpTransport.prototype.setHeader = function(name, value) {
      if (!this.params.headers) {
        this.params.headers = {};
      }
      return this.params.headers[name] = value;
    };

    httpTransport.prototype.removeHeader = function(name) {
      return delete this.params.headers[name];
    };

    httpTransport.prototype.send = function(body, callback) {
      var req;
      this.params.method = 'POST';
      req = this.http.request(this.params, function(res) {
        var data;
        data = "";
        res.on('data', function(chunk) {
          return data += chunk;
        });
        res.on('end', function() {
          if (callback) {
            return callback(null, data);
          }
        });
        return res.on('error', function(e) {
          if (callback) {
            return callback(e, null);
          }
        });
      });
      return req.end(JSON.stringify(body));
    };

    httpTransport.prototype.close = function() {
      if (this.httpServer) {
        return this.httpServer.close();
      }
    };

    httpTransport.prototype.listen = function(server) {
      var listener;
      listener = rpc.httpListener(server);
      if (this.params.ssl) {
        this.httpServer = this.http.createServer(this.params, listener);
      } else {
        this.httpServer = this.http.createServer(listener);
      }
      return this.httpServer.listen(this.params.port);
    };

    return httpTransport;

  })();

  module.exports = httpTransport;

}).call(this);
