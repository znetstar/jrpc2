// Generated by CoffeeScript 1.12.7
(function() {
  var net, tcpTransport;

  net = require('net');

  tcpTransport = (function() {
    function tcpTransport(params) {
      this.params = params;
      if (!this.params) {
        throw new Error('emptyParams');
      }
    }

    tcpTransport.prototype.send = function(body, callback) {
      var client;
      client = net.connect(this.params, function() {
        return client.write(JSON.stringify(body));
      });
      client.on('error', function(e) {
        if (callback) {
          return callback(e, null);
        }
      });
      client.on('timeout', function() {
        if (callback) {
          callback(new Error('TimeoutError'), null);
        }
        return client.end();
      });
      return client.on('data', function(data) {
        if (callback) {
          callback(null, data.toString());
        }
        return client.end();
      });
    };

    tcpTransport.prototype.close = function() {
      if (this.tcpServer) {
        return this.tcpServer.close();
      }
    };

    tcpTransport.prototype.listen = function(server) {
      this.tcpServer = net.createServer(function(socket) {
        socket.on('error', function() {
          return socket.end();
        });
        return socket.on('data', function(data) {
          var ip;
          ip = socket.remoteAddress || '127.0.0.1';
          ip = ip.replace('::ffff:', '');
          return server.handleCall(data.toString(), {
            client_ip: ip
          }, function(answer) {
            if (answer) {
              return socket.write(JSON.stringify(answer));
            }
          });
        });
      });
      if (this.params.path != null) {
        return this.tcpServer.listen(this.params.path);
      } else {
        return this.tcpServer.listen(this.params.port);
      }
    };

    return tcpTransport;

  })();

  module.exports = tcpTransport;

}).call(this);
